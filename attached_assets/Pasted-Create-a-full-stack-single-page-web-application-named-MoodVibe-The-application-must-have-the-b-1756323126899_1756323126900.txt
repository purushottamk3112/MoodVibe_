Create a full-stack, single-page web application named **MoodVibe**. The application must have the best UI and animations in the world, inspired by award-winning web design.

## 1. Project Goal
Build **MoodVibe**, a Mood-Based Music Recommender. The user will type a mood, and the app will provide a list of relevant songs from Spotify. The application will not have a database. The front-end will include an option for the user to select a light or dark theme and a button to open each recommended song in the Spotify application.

## 2. Tech Stack
* **Frontend:** React. Use **Framer Motion** for advanced, physics-based animations and **Tailwind CSS** for a clean, modern, and highly responsive UI.
* **Backend:** Node.js Express server.
* **External Libraries:** Use `axios` for all API calls on the backend.

## 3. APIs and Credentials
All API keys and connection strings must be stored securely in a `.env` file and accessed via `process.env`. Do not hardcode them.

* **LLM API:** Google Gemini API for mood recognition.
    * **API Key:** `AIzaSyB5Gd4X_RtIRPh0buXQODuKYc3RQxYgLvM`
* **Music API:** Spotify API for music recommendations.
    * **Client ID:** `64fcffb4a80c42ec8b9699c79b300508`
    * **Client Secret:** `b2017354678e420297731092b1e11927`

## 4. Frontend Requirements
* **Visual Design:** The UI should be sleek, minimalist, and elegant. Use a soft color palette for the light theme and a deep, atmospheric palette for the dark theme. Pay close attention to typography, spacing, and a clean visual hierarchy. Use subtle, non-intrusive hover effects on all interactive elements.
* **Animations:** Implement seamless and purposeful animations throughout the user journey.
    * **Initial Load:** The main page elements (input field, button, and logo) should fade in and slide into place with a subtle spring effect.
    * **Button Interactions:** The "Get Recommendations" button should have a satisfying press-down and release animation upon click.
    * **Result Display:** When recommendations are loaded, the song cards should **stagger-in** one by one with a smooth fade and slide-up animation. This will create a dynamic, engaging visual effect.
* **Functionality:**
    * A theme toggle button that smoothly transitions between light and dark themes. The user's preference should be saved to local storage.
    * For each song, include an interactive component (e.g., a button or card) that, when clicked, opens the song directly in the Spotify app using its web link.
* **Responsiveness:** The layout must be fully responsive and work flawlessly on all devices, from mobile phones to large desktops.

## 5. Backend Logic (Server-Side)
* Create a single API endpoint, `/api/recommendations`, that accepts the user's mood via a POST request.
* Inside this endpoint, follow this precise sequence of operations:
    1.  **Mood Recognition:** Use the Gemini API to analyze the user's mood. The prompt to the LLM should ask for a comma-separated list of 5 music genres or keywords that match the input mood.
    2.  **Spotify Authentication:** Use the Spotify Client ID and Secret to perform a Client Credentials flow and obtain a temporary access token for the Spotify API.
    3.  **Spotify Search:** Use the access token and the keywords from the Gemini API to make a `GET` request to the Spotify Search endpoint. Search for `type=track,playlist` and use the keywords in the `q` parameter.
    4.  **Response:** Return a JSON object to the frontend containing only the essential track information (e.g., song title, artist, album, and a Spotify URL for opening in the app).

## 6. Project Structure and Security
* The project must be a full-stack monorepo with separate `frontend` and `backend` directories.
* The `.env` file should be in the root directory.
* The backend should be an Express server that handles the API requests and serves the static files from the React build.

Generate the complete, production-ready code for all components and integrations, without any placeholder or dummy code.